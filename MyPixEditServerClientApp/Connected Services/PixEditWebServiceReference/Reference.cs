//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPixEditServerClientApp.PixEditWebServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobDocumentChunk", Namespace="http://schemas.datacontract.org/2004/07/PixEditWebServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class JobDocumentChunk : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ByteCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ByteCount {
            get {
                return this.ByteCountField;
            }
            set {
                if ((this.ByteCountField.Equals(value) != true)) {
                    this.ByteCountField = value;
                    this.RaisePropertyChanged("ByteCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocProcessStatus.StatusType", Namespace="http://schemas.datacontract.org/2004/07/DocProcessProfilesLib")]
    public enum DocProcessStatusStatusType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InQueue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Processing = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Succeeded = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delivered = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Purged = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocServerFolderType", Namespace="http://schemas.datacontract.org/2004/07/DocProcessProfilesLib")]
    public enum DocServerFolderType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Queued = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Working = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Succeeded = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Output = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Purged = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Backup = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PixEditWebServiceReference.IPixEditWebService", CallbackContract=typeof(MyPixEditServerClientApp.PixEditWebServiceReference.IPixEditWebServiceCallback))]
    public interface IPixEditWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateUserResponse")]
        System.Guid CreateUser(string username, string password, string email, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateUserResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateUserAsync(string username, string password, string email, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUserResponse")]
        System.Guid ValidateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUserResponse")]
        System.Threading.Tasks.Task<System.Guid> ValidateUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUserResponse")]
        void UpdateUser(System.Guid id, string username, string email, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string username, string email, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPassword", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPassword", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUserResponse")]
        bool DeleteUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserResponse")]
        string GetUser(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserResponse")]
        System.Threading.Tasks.Task<string> GetUserAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveUserResponse")]
        void SaveUser(string userinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveUserResponse")]
        System.Threading.Tasks.Task SaveUserAsync(string userinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FindUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FindUserResponse")]
        System.Guid FindUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FindUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FindUserResponse")]
        System.Threading.Tasks.Task<System.Guid> FindUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserListResponse")]
        System.Guid[] GetUserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserListResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetUserListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCountResponse")]
        int GetOnlineCount(int timeWindow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCountResponse")]
        System.Threading.Tasks.Task<int> GetOnlineCountAsync(int timeWindow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdminResponse")]
        bool IsUserAdmin(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdminResponse")]
        System.Threading.Tasks.Task<bool> IsUserAdminAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdminResponse")]
        void SetUserAdmin(System.Guid id, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdminResponse")]
        System.Threading.Tasks.Task SetUserAdminAsync(System.Guid id, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateJobResponse")]
        System.Guid CreateJob(System.Guid userId, string xmlSpec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateJobResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateJobAsync(System.Guid userId, string xmlSpec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJobResponse")]
        System.Guid CreateConvertJob(System.Guid userId, string title, string filename, string fileformat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJobResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateConvertJobAsync(System.Guid userId, string title, string filename, string fileformat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJobResponse")]
        void SubmitJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJobResponse")]
        System.Threading.Tasks.Task SubmitJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CancelJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CancelJobResponse")]
        void CancelJob(System.Guid userId, System.Guid jobId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CancelJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CancelJobResponse")]
        System.Threading.Tasks.Task CancelJobAsync(System.Guid userId, System.Guid jobId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AbortJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AbortJobResponse")]
        void AbortJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AbortJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AbortJobResponse")]
        System.Threading.Tasks.Task AbortJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobResponse")]
        void PurgeJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobResponse")]
        System.Threading.Tasks.Task PurgeJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJobResponse")]
        void ArchiveJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJobResponse")]
        System.Threading.Tasks.Task ArchiveJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolderResponse")]
        string GetJobStatusFolder(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolderResponse")]
        System.Threading.Tasks.Task<string> GetJobStatusFolderAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolderResponse")]
        string GetJobDocumentsFolder(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolderResponse")]
        System.Threading.Tasks.Task<string> GetJobDocumentsFolderAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolderResponse")]
        string GetOutputFolder(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolderResponse")]
        System.Threading.Tasks.Task<string> GetOutputFolderAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocument", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocumentResponse")]
        void BeginUploadJobDocument(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocument", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocumentResponse")]
        System.Threading.Tasks.Task BeginUploadJobDocumentAsync(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunkResponse")]
        void UploadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunkResponse")]
        System.Threading.Tasks.Task UploadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSize", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSizeResponse")]
        long GetJobDocumentSize(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSize", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSizeResponse")]
        System.Threading.Tasks.Task<long> GetJobDocumentSizeAsync(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunkResponse")]
        MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk DownloadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunkResponse")]
        System.Threading.Tasks.Task<MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk> DownloadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusResponse")]
        string GetJobStatus(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusResponse")]
        System.Threading.Tasks.Task<string> GetJobStatusAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathnameResponse")]
        string GetJobStatusPathname(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathnameResponse")]
        System.Threading.Tasks.Task<string> GetJobStatusPathnameAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpec", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecResponse")]
        string GetJobSpec(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpec", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecResponse")]
        System.Threading.Tasks.Task<string> GetJobSpecAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathnameResponse")]
        string GetJobSpecPathname(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathnameResponse")]
        System.Threading.Tasks.Task<string> GetJobSpecPathnameAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobListResponse")]
        System.Guid[] GetStatusJobList(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobListResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetStatusJobListAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobListResponse")]
        System.Guid[] GetJobList(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobListResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetJobListAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobs", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobsResponse")]
        void PurgeAllJobs(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobs", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobsResponse")]
        System.Threading.Tasks.Task PurgeAllJobsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolderResponse")]
        void PurgeJobFolder(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolderResponse")]
        System.Threading.Tasks.Task PurgeJobFolderAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileListResponse")]
        void SaveJobProfileList(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileListResponse")]
        System.Threading.Tasks.Task SaveJobProfileListAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileListResponse")]
        string GetJobProfileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileListResponse")]
        System.Threading.Tasks.Task<string> GetJobProfileListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileListResponse")]
        void SetUserJobProfileList(System.Guid userId, System.Guid[] profileIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileListResponse")]
        System.Threading.Tasks.Task SetUserJobProfileListAsync(System.Guid userId, System.Guid[] profileIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileListResponse")]
        string GetUserJobProfileList(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileListResponse")]
        System.Threading.Tasks.Task<string> GetUserJobProfileListAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatusResponse")]
        string GetServerStatus(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatusResponse")]
        System.Threading.Tasks.Task<string> GetServerStatusAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathName", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathNameResponse")]
        string GetServerLogPathName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathName", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathNameResponse")]
        System.Threading.Tasks.Task<string> GetServerLogPathNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogResponse")]
        string GetServerLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogResponse")]
        System.Threading.Tasks.Task<string> GetServerLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCountResponse")]
        string GetTotalJobCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCountResponse")]
        System.Threading.Tasks.Task<string> GetTotalJobCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueue", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueueResponse")]
        string GetServerQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueue", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueueResponse")]
        System.Threading.Tasks.Task<string> GetServerQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCountResponse")]
        int GetQueuedJobsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCountResponse")]
        System.Threading.Tasks.Task<int> GetQueuedJobsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLogResponse")]
        string GetJobLog(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLogResponse")]
        System.Threading.Tasks.Task<string> GetJobLogAsync(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLogResponse")]
        string GetServerPerformanceLog(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLogResponse")]
        System.Threading.Tasks.Task<string> GetServerPerformanceLogAsync(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPath", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPathResponse")]
        string GetServerImagesPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPath", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPathResponse")]
        System.Threading.Tasks.Task<string> GetServerImagesPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIP", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIPResponse")]
        string GetServerIP(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIP", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIPResponse")]
        System.Threading.Tasks.Task<string> GetServerIPAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSettingResponse")]
        string GetAppSetting(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSettingResponse")]
        System.Threading.Tasks.Task<string> GetAppSettingAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSettingResponse")]
        void SetAppSetting(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSettingResponse")]
        System.Threading.Tasks.Task SetAppSettingAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSettingResponse")]
        string GetEncryptedAppSetting(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSettingResponse")]
        System.Threading.Tasks.Task<string> GetEncryptedAppSettingAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSettingResponse")]
        void SetEncryptedAppSetting(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSettingResponse")]
        System.Threading.Tasks.Task SetEncryptedAppSettingAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceListResponse")]
        string GetClientDeviceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceListResponse")]
        System.Threading.Tasks.Task<string> GetClientDeviceListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceListResponse")]
        void SaveClientDeviceList(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceListResponse")]
        System.Threading.Tasks.Task SaveClientDeviceListAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlerts", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlertsResponse")]
        void FlushServerAlerts(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlerts", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlertsResponse")]
        System.Threading.Tasks.Task FlushServerAlertsAsync(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatusResponse")]
        void AddAlertToServerStatus(System.Guid userId, int alertType, string alertNotifier, int warningLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatusResponse")]
        System.Threading.Tasks.Task AddAlertToServerStatusAsync(System.Guid userId, int alertType, string alertNotifier, int warningLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatusResponse")]
        void RemoveAlertFromServerStatus(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatusResponse")]
        System.Threading.Tasks.Task RemoveAlertFromServerStatusAsync(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerType", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerTypeResponse")]
        int GetPixEditServerType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerType", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerTypeResponse")]
        System.Threading.Tasks.Task<int> GetPixEditServerTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebService/SubscribeNotifications", ReplyAction="http://tempuri.org/IPixEditWebService/SubscribeNotificationsResponse")]
        System.Guid SubscribeNotifications(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebService/SubscribeNotifications", ReplyAction="http://tempuri.org/IPixEditWebService/SubscribeNotificationsResponse")]
        System.Threading.Tasks.Task<System.Guid> SubscribeNotificationsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebService/UnsubscribeNotifications", ReplyAction="http://tempuri.org/IPixEditWebService/UnsubscribeNotificationsResponse")]
        void UnsubscribeNotifications(System.Guid subscriberId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebService/UnsubscribeNotifications", ReplyAction="http://tempuri.org/IPixEditWebService/UnsubscribeNotificationsResponse")]
        System.Threading.Tasks.Task UnsubscribeNotificationsAsync(System.Guid subscriberId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPixEditWebServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPixEditWebService/OnServerStatus")]
        void OnServerStatus(string status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPixEditWebService/OnJobStatusChanged")]
        void OnJobStatusChanged(string status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPixEditWebService/OnJobProfilesChanged")]
        void OnJobProfilesChanged();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPixEditWebServiceChannel : MyPixEditServerClientApp.PixEditWebServiceReference.IPixEditWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PixEditWebServiceClient : System.ServiceModel.DuplexClientBase<MyPixEditServerClientApp.PixEditWebServiceReference.IPixEditWebService>, MyPixEditServerClientApp.PixEditWebServiceReference.IPixEditWebService {
        
        public PixEditWebServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PixEditWebServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PixEditWebServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PixEditWebServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PixEditWebServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Guid CreateUser(string username, string password, string email, bool isAdmin) {
            return base.Channel.CreateUser(username, password, email, isAdmin);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateUserAsync(string username, string password, string email, bool isAdmin) {
            return base.Channel.CreateUserAsync(username, password, email, isAdmin);
        }
        
        public System.Guid ValidateUser(string username, string password) {
            return base.Channel.ValidateUser(username, password);
        }
        
        public System.Threading.Tasks.Task<System.Guid> ValidateUserAsync(string username, string password) {
            return base.Channel.ValidateUserAsync(username, password);
        }
        
        public void UpdateUser(System.Guid id, string username, string email, string comment) {
            base.Channel.UpdateUser(id, username, email, comment);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string username, string email, string comment) {
            return base.Channel.UpdateUserAsync(id, username, email, comment);
        }
        
        public bool ChangeUserPassword(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangeUserPassword(username, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangeUserPasswordAsync(username, oldPassword, newPassword);
        }
        
        public bool DeleteUser(string name) {
            return base.Channel.DeleteUser(name);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string name) {
            return base.Channel.DeleteUserAsync(name);
        }
        
        public string GetUser(System.Guid id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUserAsync(System.Guid id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public void SaveUser(string userinfo) {
            base.Channel.SaveUser(userinfo);
        }
        
        public System.Threading.Tasks.Task SaveUserAsync(string userinfo) {
            return base.Channel.SaveUserAsync(userinfo);
        }
        
        public System.Guid FindUser(string name) {
            return base.Channel.FindUser(name);
        }
        
        public System.Threading.Tasks.Task<System.Guid> FindUserAsync(string name) {
            return base.Channel.FindUserAsync(name);
        }
        
        public System.Guid[] GetUserList() {
            return base.Channel.GetUserList();
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetUserListAsync() {
            return base.Channel.GetUserListAsync();
        }
        
        public int GetOnlineCount(int timeWindow) {
            return base.Channel.GetOnlineCount(timeWindow);
        }
        
        public System.Threading.Tasks.Task<int> GetOnlineCountAsync(int timeWindow) {
            return base.Channel.GetOnlineCountAsync(timeWindow);
        }
        
        public bool IsUserAdmin(System.Guid id) {
            return base.Channel.IsUserAdmin(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserAdminAsync(System.Guid id) {
            return base.Channel.IsUserAdminAsync(id);
        }
        
        public void SetUserAdmin(System.Guid id, bool isAdmin) {
            base.Channel.SetUserAdmin(id, isAdmin);
        }
        
        public System.Threading.Tasks.Task SetUserAdminAsync(System.Guid id, bool isAdmin) {
            return base.Channel.SetUserAdminAsync(id, isAdmin);
        }
        
        public System.Guid CreateJob(System.Guid userId, string xmlSpec) {
            return base.Channel.CreateJob(userId, xmlSpec);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateJobAsync(System.Guid userId, string xmlSpec) {
            return base.Channel.CreateJobAsync(userId, xmlSpec);
        }
        
        public System.Guid CreateConvertJob(System.Guid userId, string title, string filename, string fileformat) {
            return base.Channel.CreateConvertJob(userId, title, filename, fileformat);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateConvertJobAsync(System.Guid userId, string title, string filename, string fileformat) {
            return base.Channel.CreateConvertJobAsync(userId, title, filename, fileformat);
        }
        
        public void SubmitJob(System.Guid userId, System.Guid jobId) {
            base.Channel.SubmitJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task SubmitJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.SubmitJobAsync(userId, jobId);
        }
        
        public void CancelJob(System.Guid userId, System.Guid jobId, string message) {
            base.Channel.CancelJob(userId, jobId, message);
        }
        
        public System.Threading.Tasks.Task CancelJobAsync(System.Guid userId, System.Guid jobId, string message) {
            return base.Channel.CancelJobAsync(userId, jobId, message);
        }
        
        public void AbortJob(System.Guid userId, System.Guid jobId) {
            base.Channel.AbortJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task AbortJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.AbortJobAsync(userId, jobId);
        }
        
        public void PurgeJob(System.Guid userId, System.Guid jobId) {
            base.Channel.PurgeJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task PurgeJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.PurgeJobAsync(userId, jobId);
        }
        
        public void ArchiveJob(System.Guid userId, System.Guid jobId) {
            base.Channel.ArchiveJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task ArchiveJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.ArchiveJobAsync(userId, jobId);
        }
        
        public string GetJobStatusFolder(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusFolder(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobStatusFolderAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusFolderAsync(userId, jobId);
        }
        
        public string GetJobDocumentsFolder(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobDocumentsFolder(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobDocumentsFolderAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobDocumentsFolderAsync(userId, jobId);
        }
        
        public string GetOutputFolder(System.Guid userId) {
            return base.Channel.GetOutputFolder(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetOutputFolderAsync(System.Guid userId) {
            return base.Channel.GetOutputFolderAsync(userId);
        }
        
        public void BeginUploadJobDocument(System.Guid userId, System.Guid jobId, string filename) {
            base.Channel.BeginUploadJobDocument(userId, jobId, filename);
        }
        
        public System.Threading.Tasks.Task BeginUploadJobDocumentAsync(System.Guid userId, System.Guid jobId, string filename) {
            return base.Channel.BeginUploadJobDocumentAsync(userId, jobId, filename);
        }
        
        public void UploadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk) {
            base.Channel.UploadJobDocumentChunk(userId, jobId, filename, chunk);
        }
        
        public System.Threading.Tasks.Task UploadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk) {
            return base.Channel.UploadJobDocumentChunkAsync(userId, jobId, filename, chunk);
        }
        
        public long GetJobDocumentSize(System.Guid userId, System.Guid jobId, string filename) {
            return base.Channel.GetJobDocumentSize(userId, jobId, filename);
        }
        
        public System.Threading.Tasks.Task<long> GetJobDocumentSizeAsync(System.Guid userId, System.Guid jobId, string filename) {
            return base.Channel.GetJobDocumentSizeAsync(userId, jobId, filename);
        }
        
        public MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk DownloadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount) {
            return base.Channel.DownloadJobDocumentChunk(userId, jobId, filename, startPos, byteCount);
        }
        
        public System.Threading.Tasks.Task<MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk> DownloadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount) {
            return base.Channel.DownloadJobDocumentChunkAsync(userId, jobId, filename, startPos, byteCount);
        }
        
        public string GetJobStatus(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatus(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobStatusAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusAsync(userId, jobId);
        }
        
        public string GetJobStatusPathname(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusPathname(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobStatusPathnameAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusPathnameAsync(userId, jobId);
        }
        
        public string GetJobSpec(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpec(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobSpecAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpecAsync(userId, jobId);
        }
        
        public string GetJobSpecPathname(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpecPathname(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobSpecPathnameAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpecPathnameAsync(userId, jobId);
        }
        
        public System.Guid[] GetStatusJobList(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status) {
            return base.Channel.GetStatusJobList(userId, status);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetStatusJobListAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status) {
            return base.Channel.GetStatusJobListAsync(userId, status);
        }
        
        public System.Guid[] GetJobList(System.Guid userId) {
            return base.Channel.GetJobList(userId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetJobListAsync(System.Guid userId) {
            return base.Channel.GetJobListAsync(userId);
        }
        
        public void PurgeAllJobs(System.Guid userId) {
            base.Channel.PurgeAllJobs(userId);
        }
        
        public System.Threading.Tasks.Task PurgeAllJobsAsync(System.Guid userId) {
            return base.Channel.PurgeAllJobsAsync(userId);
        }
        
        public void PurgeJobFolder(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder) {
            base.Channel.PurgeJobFolder(userId, folder);
        }
        
        public System.Threading.Tasks.Task PurgeJobFolderAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder) {
            return base.Channel.PurgeJobFolderAsync(userId, folder);
        }
        
        public void SaveJobProfileList(string xml) {
            base.Channel.SaveJobProfileList(xml);
        }
        
        public System.Threading.Tasks.Task SaveJobProfileListAsync(string xml) {
            return base.Channel.SaveJobProfileListAsync(xml);
        }
        
        public string GetJobProfileList() {
            return base.Channel.GetJobProfileList();
        }
        
        public System.Threading.Tasks.Task<string> GetJobProfileListAsync() {
            return base.Channel.GetJobProfileListAsync();
        }
        
        public void SetUserJobProfileList(System.Guid userId, System.Guid[] profileIdList) {
            base.Channel.SetUserJobProfileList(userId, profileIdList);
        }
        
        public System.Threading.Tasks.Task SetUserJobProfileListAsync(System.Guid userId, System.Guid[] profileIdList) {
            return base.Channel.SetUserJobProfileListAsync(userId, profileIdList);
        }
        
        public string GetUserJobProfileList(System.Guid userId) {
            return base.Channel.GetUserJobProfileList(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserJobProfileListAsync(System.Guid userId) {
            return base.Channel.GetUserJobProfileListAsync(userId);
        }
        
        public string GetServerStatus(System.Guid userId) {
            return base.Channel.GetServerStatus(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetServerStatusAsync(System.Guid userId) {
            return base.Channel.GetServerStatusAsync(userId);
        }
        
        public string GetServerLogPathName() {
            return base.Channel.GetServerLogPathName();
        }
        
        public System.Threading.Tasks.Task<string> GetServerLogPathNameAsync() {
            return base.Channel.GetServerLogPathNameAsync();
        }
        
        public string GetServerLog() {
            return base.Channel.GetServerLog();
        }
        
        public System.Threading.Tasks.Task<string> GetServerLogAsync() {
            return base.Channel.GetServerLogAsync();
        }
        
        public string GetTotalJobCount() {
            return base.Channel.GetTotalJobCount();
        }
        
        public System.Threading.Tasks.Task<string> GetTotalJobCountAsync() {
            return base.Channel.GetTotalJobCountAsync();
        }
        
        public string GetServerQueue() {
            return base.Channel.GetServerQueue();
        }
        
        public System.Threading.Tasks.Task<string> GetServerQueueAsync() {
            return base.Channel.GetServerQueueAsync();
        }
        
        public int GetQueuedJobsCount() {
            return base.Channel.GetQueuedJobsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetQueuedJobsCountAsync() {
            return base.Channel.GetQueuedJobsCountAsync();
        }
        
        public string GetJobLog(string filterExpression) {
            return base.Channel.GetJobLog(filterExpression);
        }
        
        public System.Threading.Tasks.Task<string> GetJobLogAsync(string filterExpression) {
            return base.Channel.GetJobLogAsync(filterExpression);
        }
        
        public string GetServerPerformanceLog(string filterExpression) {
            return base.Channel.GetServerPerformanceLog(filterExpression);
        }
        
        public System.Threading.Tasks.Task<string> GetServerPerformanceLogAsync(string filterExpression) {
            return base.Channel.GetServerPerformanceLogAsync(filterExpression);
        }
        
        public string GetServerImagesPath() {
            return base.Channel.GetServerImagesPath();
        }
        
        public System.Threading.Tasks.Task<string> GetServerImagesPathAsync() {
            return base.Channel.GetServerImagesPathAsync();
        }
        
        public string GetServerIP(System.Guid userId) {
            return base.Channel.GetServerIP(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetServerIPAsync(System.Guid userId) {
            return base.Channel.GetServerIPAsync(userId);
        }
        
        public string GetAppSetting(string key) {
            return base.Channel.GetAppSetting(key);
        }
        
        public System.Threading.Tasks.Task<string> GetAppSettingAsync(string key) {
            return base.Channel.GetAppSettingAsync(key);
        }
        
        public void SetAppSetting(string key, string value) {
            base.Channel.SetAppSetting(key, value);
        }
        
        public System.Threading.Tasks.Task SetAppSettingAsync(string key, string value) {
            return base.Channel.SetAppSettingAsync(key, value);
        }
        
        public string GetEncryptedAppSetting(string key) {
            return base.Channel.GetEncryptedAppSetting(key);
        }
        
        public System.Threading.Tasks.Task<string> GetEncryptedAppSettingAsync(string key) {
            return base.Channel.GetEncryptedAppSettingAsync(key);
        }
        
        public void SetEncryptedAppSetting(string key, string value) {
            base.Channel.SetEncryptedAppSetting(key, value);
        }
        
        public System.Threading.Tasks.Task SetEncryptedAppSettingAsync(string key, string value) {
            return base.Channel.SetEncryptedAppSettingAsync(key, value);
        }
        
        public string GetClientDeviceList() {
            return base.Channel.GetClientDeviceList();
        }
        
        public System.Threading.Tasks.Task<string> GetClientDeviceListAsync() {
            return base.Channel.GetClientDeviceListAsync();
        }
        
        public void SaveClientDeviceList(string xml) {
            base.Channel.SaveClientDeviceList(xml);
        }
        
        public System.Threading.Tasks.Task SaveClientDeviceListAsync(string xml) {
            return base.Channel.SaveClientDeviceListAsync(xml);
        }
        
        public void FlushServerAlerts(System.Guid userId, int alertType) {
            base.Channel.FlushServerAlerts(userId, alertType);
        }
        
        public System.Threading.Tasks.Task FlushServerAlertsAsync(System.Guid userId, int alertType) {
            return base.Channel.FlushServerAlertsAsync(userId, alertType);
        }
        
        public void AddAlertToServerStatus(System.Guid userId, int alertType, string alertNotifier, int warningLevel) {
            base.Channel.AddAlertToServerStatus(userId, alertType, alertNotifier, warningLevel);
        }
        
        public System.Threading.Tasks.Task AddAlertToServerStatusAsync(System.Guid userId, int alertType, string alertNotifier, int warningLevel) {
            return base.Channel.AddAlertToServerStatusAsync(userId, alertType, alertNotifier, warningLevel);
        }
        
        public void RemoveAlertFromServerStatus(System.Guid userId, int alertType) {
            base.Channel.RemoveAlertFromServerStatus(userId, alertType);
        }
        
        public System.Threading.Tasks.Task RemoveAlertFromServerStatusAsync(System.Guid userId, int alertType) {
            return base.Channel.RemoveAlertFromServerStatusAsync(userId, alertType);
        }
        
        public int GetPixEditServerType() {
            return base.Channel.GetPixEditServerType();
        }
        
        public System.Threading.Tasks.Task<int> GetPixEditServerTypeAsync() {
            return base.Channel.GetPixEditServerTypeAsync();
        }
        
        public System.Guid SubscribeNotifications(System.Guid userId) {
            return base.Channel.SubscribeNotifications(userId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> SubscribeNotificationsAsync(System.Guid userId) {
            return base.Channel.SubscribeNotificationsAsync(userId);
        }
        
        public void UnsubscribeNotifications(System.Guid subscriberId) {
            base.Channel.UnsubscribeNotifications(subscriberId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeNotificationsAsync(System.Guid subscriberId) {
            return base.Channel.UnsubscribeNotificationsAsync(subscriberId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PixEditWebServiceReference.IPixEditWebServiceSimplex")]
    public interface IPixEditWebServiceSimplex {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateUserResponse")]
        System.Guid CreateUser(string username, string password, string email, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateUserResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateUserAsync(string username, string password, string email, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUserResponse")]
        System.Guid ValidateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ValidateUserResponse")]
        System.Threading.Tasks.Task<System.Guid> ValidateUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUserResponse")]
        void UpdateUser(System.Guid id, string username, string email, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string username, string email, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPassword", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPassword", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUserResponse")]
        bool DeleteUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserResponse")]
        string GetUser(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserResponse")]
        System.Threading.Tasks.Task<string> GetUserAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveUserResponse")]
        void SaveUser(string userinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveUserResponse")]
        System.Threading.Tasks.Task SaveUserAsync(string userinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FindUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FindUserResponse")]
        System.Guid FindUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FindUser", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FindUserResponse")]
        System.Threading.Tasks.Task<System.Guid> FindUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserListResponse")]
        System.Guid[] GetUserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserListResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetUserListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCountResponse")]
        int GetOnlineCount(int timeWindow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOnlineCountResponse")]
        System.Threading.Tasks.Task<int> GetOnlineCountAsync(int timeWindow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdminResponse")]
        bool IsUserAdmin(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/IsUserAdminResponse")]
        System.Threading.Tasks.Task<bool> IsUserAdminAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdminResponse")]
        void SetUserAdmin(System.Guid id, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdmin", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserAdminResponse")]
        System.Threading.Tasks.Task SetUserAdminAsync(System.Guid id, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateJobResponse")]
        System.Guid CreateJob(System.Guid userId, string xmlSpec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateJobResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateJobAsync(System.Guid userId, string xmlSpec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJobResponse")]
        System.Guid CreateConvertJob(System.Guid userId, string title, string filename, string fileformat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CreateConvertJobResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateConvertJobAsync(System.Guid userId, string title, string filename, string fileformat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJobResponse")]
        void SubmitJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SubmitJobResponse")]
        System.Threading.Tasks.Task SubmitJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CancelJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CancelJobResponse")]
        void CancelJob(System.Guid userId, System.Guid jobId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/CancelJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/CancelJobResponse")]
        System.Threading.Tasks.Task CancelJobAsync(System.Guid userId, System.Guid jobId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AbortJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AbortJobResponse")]
        void AbortJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AbortJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AbortJobResponse")]
        System.Threading.Tasks.Task AbortJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobResponse")]
        void PurgeJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobResponse")]
        System.Threading.Tasks.Task PurgeJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJobResponse")]
        void ArchiveJob(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJob", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/ArchiveJobResponse")]
        System.Threading.Tasks.Task ArchiveJobAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolderResponse")]
        string GetJobStatusFolder(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusFolderResponse")]
        System.Threading.Tasks.Task<string> GetJobStatusFolderAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolderResponse")]
        string GetJobDocumentsFolder(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentsFolderResponse")]
        System.Threading.Tasks.Task<string> GetJobDocumentsFolderAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolderResponse")]
        string GetOutputFolder(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetOutputFolderResponse")]
        System.Threading.Tasks.Task<string> GetOutputFolderAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocument", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocumentResponse")]
        void BeginUploadJobDocument(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocument", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/BeginUploadJobDocumentResponse")]
        System.Threading.Tasks.Task BeginUploadJobDocumentAsync(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunkResponse")]
        void UploadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/UploadJobDocumentChunkResponse")]
        System.Threading.Tasks.Task UploadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSize", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSizeResponse")]
        long GetJobDocumentSize(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSize", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobDocumentSizeResponse")]
        System.Threading.Tasks.Task<long> GetJobDocumentSizeAsync(System.Guid userId, System.Guid jobId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunkResponse")]
        MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk DownloadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunk", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/DownloadJobDocumentChunkResponse")]
        System.Threading.Tasks.Task<MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk> DownloadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusResponse")]
        string GetJobStatus(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusResponse")]
        System.Threading.Tasks.Task<string> GetJobStatusAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathnameResponse")]
        string GetJobStatusPathname(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobStatusPathnameResponse")]
        System.Threading.Tasks.Task<string> GetJobStatusPathnameAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpec", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecResponse")]
        string GetJobSpec(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpec", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecResponse")]
        System.Threading.Tasks.Task<string> GetJobSpecAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathnameResponse")]
        string GetJobSpecPathname(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathname", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobSpecPathnameResponse")]
        System.Threading.Tasks.Task<string> GetJobSpecPathnameAsync(System.Guid userId, System.Guid jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobListResponse")]
        System.Guid[] GetStatusJobList(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetStatusJobListResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetStatusJobListAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobListResponse")]
        System.Guid[] GetJobList(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobListResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetJobListAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobs", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobsResponse")]
        void PurgeAllJobs(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobs", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeAllJobsResponse")]
        System.Threading.Tasks.Task PurgeAllJobsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolderResponse")]
        void PurgeJobFolder(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolder", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/PurgeJobFolderResponse")]
        System.Threading.Tasks.Task PurgeJobFolderAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileListResponse")]
        void SaveJobProfileList(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveJobProfileListResponse")]
        System.Threading.Tasks.Task SaveJobProfileListAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileListResponse")]
        string GetJobProfileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobProfileListResponse")]
        System.Threading.Tasks.Task<string> GetJobProfileListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileListResponse")]
        void SetUserJobProfileList(System.Guid userId, System.Guid[] profileIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetUserJobProfileListResponse")]
        System.Threading.Tasks.Task SetUserJobProfileListAsync(System.Guid userId, System.Guid[] profileIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileListResponse")]
        string GetUserJobProfileList(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetUserJobProfileListResponse")]
        System.Threading.Tasks.Task<string> GetUserJobProfileListAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatusResponse")]
        string GetServerStatus(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerStatusResponse")]
        System.Threading.Tasks.Task<string> GetServerStatusAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathName", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathNameResponse")]
        string GetServerLogPathName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathName", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogPathNameResponse")]
        System.Threading.Tasks.Task<string> GetServerLogPathNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogResponse")]
        string GetServerLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerLogResponse")]
        System.Threading.Tasks.Task<string> GetServerLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCountResponse")]
        string GetTotalJobCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetTotalJobCountResponse")]
        System.Threading.Tasks.Task<string> GetTotalJobCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueue", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueueResponse")]
        string GetServerQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueue", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerQueueResponse")]
        System.Threading.Tasks.Task<string> GetServerQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCountResponse")]
        int GetQueuedJobsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCount", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetQueuedJobsCountResponse")]
        System.Threading.Tasks.Task<int> GetQueuedJobsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLogResponse")]
        string GetJobLog(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetJobLogResponse")]
        System.Threading.Tasks.Task<string> GetJobLogAsync(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLogResponse")]
        string GetServerPerformanceLog(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLog", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerPerformanceLogResponse")]
        System.Threading.Tasks.Task<string> GetServerPerformanceLogAsync(string filterExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPath", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPathResponse")]
        string GetServerImagesPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPath", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerImagesPathResponse")]
        System.Threading.Tasks.Task<string> GetServerImagesPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIP", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIPResponse")]
        string GetServerIP(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIP", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetServerIPResponse")]
        System.Threading.Tasks.Task<string> GetServerIPAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSettingResponse")]
        string GetAppSetting(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetAppSettingResponse")]
        System.Threading.Tasks.Task<string> GetAppSettingAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSettingResponse")]
        void SetAppSetting(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetAppSettingResponse")]
        System.Threading.Tasks.Task SetAppSettingAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSettingResponse")]
        string GetEncryptedAppSetting(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetEncryptedAppSettingResponse")]
        System.Threading.Tasks.Task<string> GetEncryptedAppSettingAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSettingResponse")]
        void SetEncryptedAppSetting(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSetting", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SetEncryptedAppSettingResponse")]
        System.Threading.Tasks.Task SetEncryptedAppSettingAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceListResponse")]
        string GetClientDeviceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetClientDeviceListResponse")]
        System.Threading.Tasks.Task<string> GetClientDeviceListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceListResponse")]
        void SaveClientDeviceList(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceList", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/SaveClientDeviceListResponse")]
        System.Threading.Tasks.Task SaveClientDeviceListAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlerts", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlertsResponse")]
        void FlushServerAlerts(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlerts", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/FlushServerAlertsResponse")]
        System.Threading.Tasks.Task FlushServerAlertsAsync(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatusResponse")]
        void AddAlertToServerStatus(System.Guid userId, int alertType, string alertNotifier, int warningLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/AddAlertToServerStatusResponse")]
        System.Threading.Tasks.Task AddAlertToServerStatusAsync(System.Guid userId, int alertType, string alertNotifier, int warningLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatusResponse")]
        void RemoveAlertFromServerStatus(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatus", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/RemoveAlertFromServerStatusResponse")]
        System.Threading.Tasks.Task RemoveAlertFromServerStatusAsync(System.Guid userId, int alertType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerType", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerTypeResponse")]
        int GetPixEditServerType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerType", ReplyAction="http://tempuri.org/IPixEditWebServiceSimplex/GetPixEditServerTypeResponse")]
        System.Threading.Tasks.Task<int> GetPixEditServerTypeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPixEditWebServiceSimplexChannel : MyPixEditServerClientApp.PixEditWebServiceReference.IPixEditWebServiceSimplex, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PixEditWebServiceSimplexClient : System.ServiceModel.ClientBase<MyPixEditServerClientApp.PixEditWebServiceReference.IPixEditWebServiceSimplex>, MyPixEditServerClientApp.PixEditWebServiceReference.IPixEditWebServiceSimplex {
        
        public PixEditWebServiceSimplexClient() {
        }
        
        public PixEditWebServiceSimplexClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PixEditWebServiceSimplexClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PixEditWebServiceSimplexClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PixEditWebServiceSimplexClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid CreateUser(string username, string password, string email, bool isAdmin) {
            return base.Channel.CreateUser(username, password, email, isAdmin);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateUserAsync(string username, string password, string email, bool isAdmin) {
            return base.Channel.CreateUserAsync(username, password, email, isAdmin);
        }
        
        public System.Guid ValidateUser(string username, string password) {
            return base.Channel.ValidateUser(username, password);
        }
        
        public System.Threading.Tasks.Task<System.Guid> ValidateUserAsync(string username, string password) {
            return base.Channel.ValidateUserAsync(username, password);
        }
        
        public void UpdateUser(System.Guid id, string username, string email, string comment) {
            base.Channel.UpdateUser(id, username, email, comment);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string username, string email, string comment) {
            return base.Channel.UpdateUserAsync(id, username, email, comment);
        }
        
        public bool ChangeUserPassword(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangeUserPassword(username, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangeUserPasswordAsync(username, oldPassword, newPassword);
        }
        
        public bool DeleteUser(string name) {
            return base.Channel.DeleteUser(name);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string name) {
            return base.Channel.DeleteUserAsync(name);
        }
        
        public string GetUser(System.Guid id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUserAsync(System.Guid id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public void SaveUser(string userinfo) {
            base.Channel.SaveUser(userinfo);
        }
        
        public System.Threading.Tasks.Task SaveUserAsync(string userinfo) {
            return base.Channel.SaveUserAsync(userinfo);
        }
        
        public System.Guid FindUser(string name) {
            return base.Channel.FindUser(name);
        }
        
        public System.Threading.Tasks.Task<System.Guid> FindUserAsync(string name) {
            return base.Channel.FindUserAsync(name);
        }
        
        public System.Guid[] GetUserList() {
            return base.Channel.GetUserList();
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetUserListAsync() {
            return base.Channel.GetUserListAsync();
        }
        
        public int GetOnlineCount(int timeWindow) {
            return base.Channel.GetOnlineCount(timeWindow);
        }
        
        public System.Threading.Tasks.Task<int> GetOnlineCountAsync(int timeWindow) {
            return base.Channel.GetOnlineCountAsync(timeWindow);
        }
        
        public bool IsUserAdmin(System.Guid id) {
            return base.Channel.IsUserAdmin(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserAdminAsync(System.Guid id) {
            return base.Channel.IsUserAdminAsync(id);
        }
        
        public void SetUserAdmin(System.Guid id, bool isAdmin) {
            base.Channel.SetUserAdmin(id, isAdmin);
        }
        
        public System.Threading.Tasks.Task SetUserAdminAsync(System.Guid id, bool isAdmin) {
            return base.Channel.SetUserAdminAsync(id, isAdmin);
        }
        
        public System.Guid CreateJob(System.Guid userId, string xmlSpec) {
            return base.Channel.CreateJob(userId, xmlSpec);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateJobAsync(System.Guid userId, string xmlSpec) {
            return base.Channel.CreateJobAsync(userId, xmlSpec);
        }
        
        public System.Guid CreateConvertJob(System.Guid userId, string title, string filename, string fileformat) {
            return base.Channel.CreateConvertJob(userId, title, filename, fileformat);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateConvertJobAsync(System.Guid userId, string title, string filename, string fileformat) {
            return base.Channel.CreateConvertJobAsync(userId, title, filename, fileformat);
        }
        
        public void SubmitJob(System.Guid userId, System.Guid jobId) {
            base.Channel.SubmitJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task SubmitJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.SubmitJobAsync(userId, jobId);
        }
        
        public void CancelJob(System.Guid userId, System.Guid jobId, string message) {
            base.Channel.CancelJob(userId, jobId, message);
        }
        
        public System.Threading.Tasks.Task CancelJobAsync(System.Guid userId, System.Guid jobId, string message) {
            return base.Channel.CancelJobAsync(userId, jobId, message);
        }
        
        public void AbortJob(System.Guid userId, System.Guid jobId) {
            base.Channel.AbortJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task AbortJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.AbortJobAsync(userId, jobId);
        }
        
        public void PurgeJob(System.Guid userId, System.Guid jobId) {
            base.Channel.PurgeJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task PurgeJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.PurgeJobAsync(userId, jobId);
        }
        
        public void ArchiveJob(System.Guid userId, System.Guid jobId) {
            base.Channel.ArchiveJob(userId, jobId);
        }
        
        public System.Threading.Tasks.Task ArchiveJobAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.ArchiveJobAsync(userId, jobId);
        }
        
        public string GetJobStatusFolder(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusFolder(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobStatusFolderAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusFolderAsync(userId, jobId);
        }
        
        public string GetJobDocumentsFolder(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobDocumentsFolder(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobDocumentsFolderAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobDocumentsFolderAsync(userId, jobId);
        }
        
        public string GetOutputFolder(System.Guid userId) {
            return base.Channel.GetOutputFolder(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetOutputFolderAsync(System.Guid userId) {
            return base.Channel.GetOutputFolderAsync(userId);
        }
        
        public void BeginUploadJobDocument(System.Guid userId, System.Guid jobId, string filename) {
            base.Channel.BeginUploadJobDocument(userId, jobId, filename);
        }
        
        public System.Threading.Tasks.Task BeginUploadJobDocumentAsync(System.Guid userId, System.Guid jobId, string filename) {
            return base.Channel.BeginUploadJobDocumentAsync(userId, jobId, filename);
        }
        
        public void UploadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk) {
            base.Channel.UploadJobDocumentChunk(userId, jobId, filename, chunk);
        }
        
        public System.Threading.Tasks.Task UploadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk chunk) {
            return base.Channel.UploadJobDocumentChunkAsync(userId, jobId, filename, chunk);
        }
        
        public long GetJobDocumentSize(System.Guid userId, System.Guid jobId, string filename) {
            return base.Channel.GetJobDocumentSize(userId, jobId, filename);
        }
        
        public System.Threading.Tasks.Task<long> GetJobDocumentSizeAsync(System.Guid userId, System.Guid jobId, string filename) {
            return base.Channel.GetJobDocumentSizeAsync(userId, jobId, filename);
        }
        
        public MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk DownloadJobDocumentChunk(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount) {
            return base.Channel.DownloadJobDocumentChunk(userId, jobId, filename, startPos, byteCount);
        }
        
        public System.Threading.Tasks.Task<MyPixEditServerClientApp.PixEditWebServiceReference.JobDocumentChunk> DownloadJobDocumentChunkAsync(System.Guid userId, System.Guid jobId, string filename, long startPos, int byteCount) {
            return base.Channel.DownloadJobDocumentChunkAsync(userId, jobId, filename, startPos, byteCount);
        }
        
        public string GetJobStatus(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatus(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobStatusAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusAsync(userId, jobId);
        }
        
        public string GetJobStatusPathname(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusPathname(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobStatusPathnameAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobStatusPathnameAsync(userId, jobId);
        }
        
        public string GetJobSpec(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpec(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobSpecAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpecAsync(userId, jobId);
        }
        
        public string GetJobSpecPathname(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpecPathname(userId, jobId);
        }
        
        public System.Threading.Tasks.Task<string> GetJobSpecPathnameAsync(System.Guid userId, System.Guid jobId) {
            return base.Channel.GetJobSpecPathnameAsync(userId, jobId);
        }
        
        public System.Guid[] GetStatusJobList(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status) {
            return base.Channel.GetStatusJobList(userId, status);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetStatusJobListAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocProcessStatusStatusType status) {
            return base.Channel.GetStatusJobListAsync(userId, status);
        }
        
        public System.Guid[] GetJobList(System.Guid userId) {
            return base.Channel.GetJobList(userId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetJobListAsync(System.Guid userId) {
            return base.Channel.GetJobListAsync(userId);
        }
        
        public void PurgeAllJobs(System.Guid userId) {
            base.Channel.PurgeAllJobs(userId);
        }
        
        public System.Threading.Tasks.Task PurgeAllJobsAsync(System.Guid userId) {
            return base.Channel.PurgeAllJobsAsync(userId);
        }
        
        public void PurgeJobFolder(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder) {
            base.Channel.PurgeJobFolder(userId, folder);
        }
        
        public System.Threading.Tasks.Task PurgeJobFolderAsync(System.Guid userId, MyPixEditServerClientApp.PixEditWebServiceReference.DocServerFolderType folder) {
            return base.Channel.PurgeJobFolderAsync(userId, folder);
        }
        
        public void SaveJobProfileList(string xml) {
            base.Channel.SaveJobProfileList(xml);
        }
        
        public System.Threading.Tasks.Task SaveJobProfileListAsync(string xml) {
            return base.Channel.SaveJobProfileListAsync(xml);
        }
        
        public string GetJobProfileList() {
            return base.Channel.GetJobProfileList();
        }
        
        public System.Threading.Tasks.Task<string> GetJobProfileListAsync() {
            return base.Channel.GetJobProfileListAsync();
        }
        
        public void SetUserJobProfileList(System.Guid userId, System.Guid[] profileIdList) {
            base.Channel.SetUserJobProfileList(userId, profileIdList);
        }
        
        public System.Threading.Tasks.Task SetUserJobProfileListAsync(System.Guid userId, System.Guid[] profileIdList) {
            return base.Channel.SetUserJobProfileListAsync(userId, profileIdList);
        }
        
        public string GetUserJobProfileList(System.Guid userId) {
            return base.Channel.GetUserJobProfileList(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserJobProfileListAsync(System.Guid userId) {
            return base.Channel.GetUserJobProfileListAsync(userId);
        }
        
        public string GetServerStatus(System.Guid userId) {
            return base.Channel.GetServerStatus(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetServerStatusAsync(System.Guid userId) {
            return base.Channel.GetServerStatusAsync(userId);
        }
        
        public string GetServerLogPathName() {
            return base.Channel.GetServerLogPathName();
        }
        
        public System.Threading.Tasks.Task<string> GetServerLogPathNameAsync() {
            return base.Channel.GetServerLogPathNameAsync();
        }
        
        public string GetServerLog() {
            return base.Channel.GetServerLog();
        }
        
        public System.Threading.Tasks.Task<string> GetServerLogAsync() {
            return base.Channel.GetServerLogAsync();
        }
        
        public string GetTotalJobCount() {
            return base.Channel.GetTotalJobCount();
        }
        
        public System.Threading.Tasks.Task<string> GetTotalJobCountAsync() {
            return base.Channel.GetTotalJobCountAsync();
        }
        
        public string GetServerQueue() {
            return base.Channel.GetServerQueue();
        }
        
        public System.Threading.Tasks.Task<string> GetServerQueueAsync() {
            return base.Channel.GetServerQueueAsync();
        }
        
        public int GetQueuedJobsCount() {
            return base.Channel.GetQueuedJobsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetQueuedJobsCountAsync() {
            return base.Channel.GetQueuedJobsCountAsync();
        }
        
        public string GetJobLog(string filterExpression) {
            return base.Channel.GetJobLog(filterExpression);
        }
        
        public System.Threading.Tasks.Task<string> GetJobLogAsync(string filterExpression) {
            return base.Channel.GetJobLogAsync(filterExpression);
        }
        
        public string GetServerPerformanceLog(string filterExpression) {
            return base.Channel.GetServerPerformanceLog(filterExpression);
        }
        
        public System.Threading.Tasks.Task<string> GetServerPerformanceLogAsync(string filterExpression) {
            return base.Channel.GetServerPerformanceLogAsync(filterExpression);
        }
        
        public string GetServerImagesPath() {
            return base.Channel.GetServerImagesPath();
        }
        
        public System.Threading.Tasks.Task<string> GetServerImagesPathAsync() {
            return base.Channel.GetServerImagesPathAsync();
        }
        
        public string GetServerIP(System.Guid userId) {
            return base.Channel.GetServerIP(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetServerIPAsync(System.Guid userId) {
            return base.Channel.GetServerIPAsync(userId);
        }
        
        public string GetAppSetting(string key) {
            return base.Channel.GetAppSetting(key);
        }
        
        public System.Threading.Tasks.Task<string> GetAppSettingAsync(string key) {
            return base.Channel.GetAppSettingAsync(key);
        }
        
        public void SetAppSetting(string key, string value) {
            base.Channel.SetAppSetting(key, value);
        }
        
        public System.Threading.Tasks.Task SetAppSettingAsync(string key, string value) {
            return base.Channel.SetAppSettingAsync(key, value);
        }
        
        public string GetEncryptedAppSetting(string key) {
            return base.Channel.GetEncryptedAppSetting(key);
        }
        
        public System.Threading.Tasks.Task<string> GetEncryptedAppSettingAsync(string key) {
            return base.Channel.GetEncryptedAppSettingAsync(key);
        }
        
        public void SetEncryptedAppSetting(string key, string value) {
            base.Channel.SetEncryptedAppSetting(key, value);
        }
        
        public System.Threading.Tasks.Task SetEncryptedAppSettingAsync(string key, string value) {
            return base.Channel.SetEncryptedAppSettingAsync(key, value);
        }
        
        public string GetClientDeviceList() {
            return base.Channel.GetClientDeviceList();
        }
        
        public System.Threading.Tasks.Task<string> GetClientDeviceListAsync() {
            return base.Channel.GetClientDeviceListAsync();
        }
        
        public void SaveClientDeviceList(string xml) {
            base.Channel.SaveClientDeviceList(xml);
        }
        
        public System.Threading.Tasks.Task SaveClientDeviceListAsync(string xml) {
            return base.Channel.SaveClientDeviceListAsync(xml);
        }
        
        public void FlushServerAlerts(System.Guid userId, int alertType) {
            base.Channel.FlushServerAlerts(userId, alertType);
        }
        
        public System.Threading.Tasks.Task FlushServerAlertsAsync(System.Guid userId, int alertType) {
            return base.Channel.FlushServerAlertsAsync(userId, alertType);
        }
        
        public void AddAlertToServerStatus(System.Guid userId, int alertType, string alertNotifier, int warningLevel) {
            base.Channel.AddAlertToServerStatus(userId, alertType, alertNotifier, warningLevel);
        }
        
        public System.Threading.Tasks.Task AddAlertToServerStatusAsync(System.Guid userId, int alertType, string alertNotifier, int warningLevel) {
            return base.Channel.AddAlertToServerStatusAsync(userId, alertType, alertNotifier, warningLevel);
        }
        
        public void RemoveAlertFromServerStatus(System.Guid userId, int alertType) {
            base.Channel.RemoveAlertFromServerStatus(userId, alertType);
        }
        
        public System.Threading.Tasks.Task RemoveAlertFromServerStatusAsync(System.Guid userId, int alertType) {
            return base.Channel.RemoveAlertFromServerStatusAsync(userId, alertType);
        }
        
        public int GetPixEditServerType() {
            return base.Channel.GetPixEditServerType();
        }
        
        public System.Threading.Tasks.Task<int> GetPixEditServerTypeAsync() {
            return base.Channel.GetPixEditServerTypeAsync();
        }
    }
}
